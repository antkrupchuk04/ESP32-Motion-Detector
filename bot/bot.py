import os
import requests
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
SERVER_URL = os.environ.get("FLASK_SERVER_URL")  # URL –¥–æ –≤–∞—à–æ–≥–æ Flask-—Å–µ—Ä–≤–µ—Ä–∞

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup([
    [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –ø–æ–¥—ñ–π —Ä—É—Ö—É")],
    [KeyboardButton("Start")]
], resize_keyboard=True)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:", reply_markup=main_menu)

# –ü–æ–∫–∞–∑ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 5 –ø–æ–¥—ñ–π —Ä—É—Ö—É
async def show_latest_motion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = requests.get(f"{SERVER_URL}/motion/latest", timeout=5)
        if response.status_code == 200:
            data = response.json().get("latest_events", [])
            if not data:
                message = "–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
            else:
                message = "–û—Å—Ç–∞–Ω–Ω—ñ 5 –ø–æ–¥—ñ–π —Ä—É—Ö—É:\n"
                for event in data:
                    ts_raw = event.get("timestamp")
                    motion = event.get("motion")

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —á–∞—Å—É +3 –≥–æ–¥–∏–Ω–∏
                    try:
                        ts_dt = datetime.strptime(ts_raw, "%a, %d %b %Y %H:%M:%S %Z")
                        ts_dt += timedelta(hours=3)
                        ts_formatted = ts_dt.strftime("%Y-%m-%d %H:%M:%S")
                    except Exception:
                        ts_formatted = ts_raw

                    message += f"- {ts_formatted}: {'‚ö†Ô∏è –†—É—Ö' if motion else '‚ùå –ù–µ–º–∞—î —Ä—É—Ö—É'}\n"
        else:
            message = "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–∞."
    except Exception as e:
        message = f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {e}"

    await update.message.reply_text(message, reply_markup=main_menu)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º–µ–Ω—é
async def handle_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –ø–æ–¥—ñ–π —Ä—É—Ö—É":
        await show_latest_motion(update, context)
    elif text == "Start":
        await start(update, context)
    else:
        await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–±—ñ—Ä.", reply_markup=main_menu)

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^(–ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –ø–æ–¥—ñ–π —Ä—É—Ö—É|Start)$"), handle_menu_choice))

    print("–ë–æ—Ç –ø—Ä–∞—Ü—é—î...")
    app.run_polling()

if __name__ == "__main__":
    main()
